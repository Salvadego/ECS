// Code generated by gen_queries.go; DO NOT EDIT.

package ecs

import "reflect"

// {{/* For each arity from 1 to MaxArity */ -}}
{{- range $n := .ArityList }}

// Tuple{{$n}} holds {{$n}} component pointers.
type Tuple{{$n}}[{{range $i, $t := genTypeParams $n}}{{if $i}}, {{end}}{{$t}} any{{end}}] struct {
    {{- range $i := seq $n }}
    C{{$i}} C{{$i}}
    {{- end }}
}

// Query{{$n}} returns a slice of Tuple{{$n}} for every entity matching the filter.
func Query{{$n}}[{{range $i, $t := genTypeParams $n}}{{if $i}}, {{end}}{{$t}} any{{end}}](
    f Filter, w *World,
) []Tuple{{$n}}[{{range $i, $t := genTypeParams $n}}{{if $i}}, {{end}}{{$t}}{{end}}] {
    var out []Tuple{{$n}}[{{range $i, $t := genTypeParams $n}}{{if $i}}, {{end}}{{$t}}{{end}}]

    // 1) map each generic type to ComponentID
    {{- range $i := seq $n }}
    t{{$i}} := reflect.TypeOf((*C{{$i}})(nil)).Elem()
    id{{$i}} := w.registry.GetComponentID(t{{$i}})
    {{- end }}

    // 2) prepare excludeIDs
    var excludeIDs []ComponentID
    for _, exT := range f.exclude {
        excludeIDs = append(excludeIDs, w.registry.GetComponentID(exT))
    }

    // 3) scan archetypes
    for _, arch := range w.archetypes {
        {{- range $i := seq $n }}
        if !arch.signature.Has(id{{$i}}) {
            continue
        }
        {{- end }}

        skip := false
        for _, exID := range excludeIDs {
            if arch.signature.Has(exID) {
                skip = true
                break
            }
        }
        if skip {
            continue
        }

        {{- range $i := seq $n }}
        data{{$i}} := arch.components[id{{$i}}]
        {{- end }}

        // 4) build results
        for i := range arch.entities {
            {{- range $i := seq $n }}
            ptr{{$i}}, ok{{$i}} := data{{$i}}[i].(C{{$i}})
            if !ok{{$i}} {
                continue
            }
            {{- end }}

            out = append(out, Tuple{{$n}}[{{range $i, $t := genTypeParams $n}}{{if $i}}, {{end}}{{$t}}{{end}}]{
                {{- range $i := seq $n }}
                C{{$i}}: ptr{{$i}},
                {{- end }}
            })
        }
    }

    return out
}
{{- end }}
